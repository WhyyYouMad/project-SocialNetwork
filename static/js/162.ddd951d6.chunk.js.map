{"version":3,"file":"static/js/162.ddd951d6.chunk.js","mappings":"6IACA,SAAgB,QAAU,yBAAyB,SAAW,2B,cCA9D,QAAyB,2BAAzB,EAA6D,2B,aCY7D,QAVA,SAAoBA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACQC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAiB,IAAMA,EAAeC,UAClDH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EAAKK,SAAEN,EAAMS,YAG1C,ECVA,EAA0B,yBCS1B,QARA,SAAiBT,GACb,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,SAC3BN,EAAMU,SAGnB,E,cCwCA,QA1CA,SAAiBV,GAEb,IAAIW,EAAQX,EAAMY,YAEdC,EAAmBF,EAAMG,SAC5BC,KAAIL,IAAWP,EAAAA,EAAAA,KAACa,EAAO,CAACN,QAASA,EAAQA,SAAcA,EAAQR,MAE5De,EAAkBN,EAAMO,QAC3BH,KAAII,IAAUhB,EAAAA,EAAAA,KAACiB,EAAU,CAACX,SAAUU,EAAOV,SAA0BP,GAAIiB,EAAOjB,IAAtBiB,EAAOjB,MAE9DmB,EAAiBV,EAAMU,eAM3B,OAAKrB,EAAMsB,QAIPC,EAAAA,EAAAA,MAAA,OAAKnB,UAAWC,EAAQa,QAAQZ,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQmB,YAAYlB,SAC/BW,KAELM,EAAAA,EAAAA,MAAA,OAAKnB,UAAWC,EAAQS,SAASR,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,OAAAG,SAAMO,KACNU,EAAAA,EAAAA,MAAA,OAAAjB,SAAA,EACIH,EAAAA,EAAAA,KAAA,OAAAG,UACAH,EAAAA,EAAAA,KAAA,YACAsB,MAAOJ,EACPK,SAhBUC,GAAU3B,EAAM4B,qBAAqBD,EAAME,OAAOJ,OAiB5DK,YAAY,0BAEZ3B,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAQ4B,QAtBHC,IAAMhC,EAAMiC,cAsBmB3B,SAAC,qBAlB/BH,EAAAA,EAAAA,KAAC+B,EAAAA,GAAQ,CAAC1B,GAAI,UAwB5C,E,wBCvBA,SAAe2B,E,QAAAA,KACKC,EAAAA,EAAAA,KAhBGzB,IACb,CACFC,YAAaD,EAAMC,gBAMDyB,IAChB,CACFT,qBAAuBU,GAASD,GAASE,EAAAA,EAAAA,IAA4BD,IACrEL,YAAaA,IAAMI,GAASG,EAAAA,EAAAA,WAMhBC,EAAAA,EAFpB,CAGmBC,E","sources":["webpack://react-1/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://react-1/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__McxvY\",\"messages\":\"Dialogs_messages__zLbjr\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__CVmte\",\"active\":\"DialogItem_active__GkB+5\"};","import { NavLink } from 'react-router-dom'\r\nimport classes from './DialogItem.module.css'\r\n\r\nfunction DialogItem(props){\r\n    let path = \"/dialogs/\" + props.id\r\n    \r\n    return(\r\n            <div className={classes.dialog + ' ' + classes.active}>\r\n                <NavLink to={path}>{props.nickname}</NavLink>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__+A421\"};","import classes from './Message.module.css'\r\n\r\nfunction Message(props){\r\n    return(\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\n\r\nfunction Dialogs(props){\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let messagesElements = state.messages\r\n    .map(message => <Message message={message.message} key={message.id}/>)\r\n  \r\n    let dialogsElements = state.dialogs\r\n    .map(dialog => <DialogItem nickname={dialog.nickname} key={dialog.id} id={dialog.id}/>)\r\n\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let onSendMessageClick = () => props.sendMessage()\r\n\r\n    let onNewMessageChange = (event) => props.updateNewMessageBody(event.target.value)\r\n\r\n    if (!props.isAuth) return <Navigate to={\"/login\"} />\r\n    \r\n\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div>\r\n                    <textarea \r\n                    value={newMessageBody} \r\n                    onChange={onNewMessageChange}\r\n                    placeholder='Enter your message'></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { WithAuthRedirect } from '../../hoc/WithAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\n// states\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n// callbacks\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        updateNewMessageBody: (body) => dispatch(updateNewMessageBodyCreator(body)),\r\n        sendMessage: () => dispatch(sendMessageCreator())\r\n    }\r\n}\r\n\r\nexport default compose(\r\n                    connect (mapStateToProps, mapDispatchToProps),\r\n                    WithAuthRedirect\r\n                ) (Dialogs)"],"names":["props","path","id","_jsx","className","classes","children","NavLink","to","nickname","message","state","dialogsPage","messagesElements","messages","map","Message","dialogsElements","dialogs","dialog","DialogItem","newMessageBody","isAuth","_jsxs","dialogsItem","value","onChange","event","updateNewMessageBody","target","placeholder","onClick","onSendMessageClick","sendMessage","Navigate","compose","connect","dispatch","body","updateNewMessageBodyCreator","sendMessageCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}